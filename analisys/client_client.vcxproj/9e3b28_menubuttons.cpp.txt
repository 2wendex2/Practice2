Checking C:\Users\gleb8\git\Practice2\client\menubuttons.cpp ...
Defines:
Undefines:
Includes:
Platform:win64
C:\Users\gleb8\git\Practice2\client\spritepool.hpp(6): style,noConstructor,The class 'Sprite' does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.
C:\Users\gleb8\git\Practice2\client\controlstate.hpp(11): style,noExplicitConstructor,Class 'ControlState' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
C:\Users\gleb8\git\Practice2\client\menu.hpp(43): style,noExplicitConstructor,Class 'Menu' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
C:\Users\gleb8\git\Practice2\client\button.hpp(15): style,missingOverride,The function 'move' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\button.hpp(16): style,missingOverride,The function 'press' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\button.hpp(17): style,missingOverride,The function 'release' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\button.hpp(18): style,missingOverride,The function 'draw' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.hpp(14): style,missingOverride,The function 'draw' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.hpp(21): style,missingOverride,The function 'pressing' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.hpp(28): style,missingOverride,The function 'pressing' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.hpp(35): style,missingOverride,The function 'pressing' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.hpp(45): style,missingOverride,The function 'pressing' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.hpp(52): style,missingOverride,The function 'pressing' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menu.hpp(31): style,missingOverride,The function 'update' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menu.hpp(37): style,missingOverride,The function 'draw' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menu.hpp(38): style,missingOverride,The function 'start' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menu.hpp(39): style,missingOverride,The function 'mouseMove' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menu.hpp(40): style,missingOverride,The function 'mousePress' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menu.hpp(41): style,missingOverride,The function 'mouseRelease' overrides a function in a base class but is not marked with a 'override' specifier.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(23): style,cstyleCast,C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(37): style,cstyleCast,C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(44): style,cstyleCast,C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(51): style,cstyleCast,C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(58): style,cstyleCast,C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(30): style,unusedFunction,The function 'getStr' is never used.
C:\Users\gleb8\git\Practice2\client\menubuttons.cpp(21): style,unusedFunction,The function 'pressing' is never used.
nofile(0): information,missingIncludeSystem,Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config.
